{"id":"add_event","component":"GridContainer","layout":"grid","isCard":true,"className":"flex-column h-full","components":[{"id":"add_event_info","title":"Event type","dataModel":"Window","component":"Form","layout":"flex","className":"flex-column","components":[{"id":"eventType","component":"TextInput","className":"mt-2","label":"Event type","events":{}}],"events":{"afterRender":{"body":"debugger\nvar parentNode;\nif (this.windowData.node) {\n    parentNode = this.windowData.rfInstance.getNode(this.windowData.node.ancestorNode);\n    this.setRecord({\n        eventType: this.windowData.node.attributes.eventType\n    });\n} else {\n    parentNode = this.windowData.rfInstance.getNode(this.windowData.parentNode);\n}\n"}}},{"id":"add_event_code","title":"Code","component":"Form","layout":"flex","containerClassName":"mt-4 flex flex-column flex-auto","className":"flex-auto","components":[{"component":"CodeEditor","id":"source","className":"flex flex-auto border-1 surface-border mt-2"}],"events":{"afterRender":{"body":"windowData = this.windowData;\nif(windowData.node) {\nvar sourceValue = windowData.node.attributes.value.body || '';\nthis.setRecord({source: sourceValue});\n}"}}}],"actions":[{"id":"save_button","label":"Save","icon":"pi pi-save","type":"action","events":{"onClick":{"body":"const _this = this;_this.components.add_event.setIsToolbarLoading(true);windowData = this.windowData;if (windowData.node) { var functionStr = _this.components.add_event_code.getRecord().source; windowData.node.attributes.value.body = functionStr, _this.components.add_event.setIsToolbarLoading(false); _this.components.dialogWindow.closeWindow();} else { let nodes = windowData.rfInstance.getNodes(); let edges = windowData.rfInstance.getEdges(); var eventType = _this.components.add_event_info.getRecord().eventType; if (eventType) { var functionStr = _this.components.add_event_code.getRecord().source; var eventNode = JSON.parse(JSON.stringify(windowData.emptyNode)); var eventId = windowData.parentNode + '_EVENT_' + eventType; eventNode = {...eventNode, data: { label: eventType, attributeType: 'EVENT' }, id: eventId, component: 'eventnode', ancestorNode: windowData.parentNode, attributes: { id: eventId, component: 'EVENT', title: eventType, eventType: eventType, value: `const _this = this; /* Use _this on async callbacks */\n${functionStr}`, }, }; const getItmSiblingPos = function (nodes, parentNode) { return nodes.findIndex((n) => n.id === parentNode + '_ADDEVENT'); }; let addItmSiblingPos = getItmSiblingPos(nodes, windowData.parentNode); if (addItmSiblingPos > -1) { eventNode.itemPosition = nodes[addItmSiblingPos].itemPosition || 0; nodes[addItmSiblingPos].itemPosition++; } else { eventNode.itemPosition = 0; } nodes.push(eventNode); var edge = { id: windowData.parentNode + '|' + eventId, source: windowData.parentNode, target: eventId, component: 'smoothstep', }; edges.push(edge); const windowId = utils.getSearchParam('window'); const windowMap = windowData.convertFlowToMap(windowId, nodes); windowData.convertMapToFlow(windowMap); } _this.components.add_event.setIsToolbarLoading(false); _this.components.dialogWindow.closeWindow();}"}},"actions":[{"id":"delete_button","label":"Delete","icon":"pi pi-trash","type":"action","events":{"onClick":{"body":"const _this = this;let windowData = this.windowData; if(windowData.node) { var nodes = windowData.rfInstance.getNodes(); var nodes = nodes.filter((el) => {return el.id != windowData.node.id}); const windowId = utils.getSearchParam('window'); const windowMap = windowData.convertFlowToMap(windowId,nodes); windowData.convertMapToFlow(windowMap); } _this.components.dialogWindow.closeWindow();"}}}]}]}