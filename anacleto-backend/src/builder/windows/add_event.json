{
    "id": "add_event",
    "component": "GridContainer",
    "layout": "flex",
    "isCard": false,
    "className": "flex-1 h-full pippo",
    "components": [
        {
            "id": "add_event_code",
            "title": "Code",
            "isCard": false,
            "component": "Form",
            "layout": "flex",
            "containerClassName": "mt-4 flex flex-column flex-auto",
            "className": "flex-auto",
            "components": [
                {
                    "component": "CodeEditor",
                    "id": "source",
                    "className": "flex flex-auto border-1 surface-border mt-2",
                    "events": {
                        "onSave": {
                            "params": "event",
                            "body": "const _this = this;\nwindowData = this.windowData;\nif (windowData.node) {\n    var functionStr = _this.components.add_event_code.getRecord().source;\n    windowData.node.attributes.value.body = functionStr; \n    _this.components.dialogWindow.closeWindow();\n} else {\n    let nodes = windowData.rfInstance.getNodes();\n    let edges = windowData.rfInstance.getEdges();\n    var eventType = _this.components.add_event_info.getRecord().eventType;\n    if (eventType) {\n        var functionStr = _this.components.add_event_code.getRecord().source;\n        var eventNode = JSON.parse(JSON.stringify(windowData.emptyNode));\n        var eventId = windowData.parentNode + '_EVENT_' + eventType;\n        eventNode = {\n            ...eventNode,\n            data: {\n                label: eventType,\n                component: 'EVENT'\n            },\n            id: eventId,\n            component: 'eventnode',\n            ancestorNode: windowData.parentNode,\n            attributes: {\n                id: eventId,\n                component: 'EVENT',\n                title: eventType,\n                eventType: eventType,\n                value: `${functionStr}`,\n            },\n        };\n        const getItmSiblingPos = function(nodes, parentNode) {\n            return nodes.findIndex((n) => n.id === parentNode + '_ADDEVENT');\n        };\n        let addItmSiblingPos = getItmSiblingPos(nodes, windowData.parentNode);\n        if (addItmSiblingPos > -1) {\n            eventNode.itemPosition = nodes[addItmSiblingPos].itemPosition || 0;\n            nodes[addItmSiblingPos].itemPosition++;\n        } else {\n            eventNode.itemPosition = 0;\n        }\n        nodes.push(eventNode);\n        var edge = {\n            id: windowData.parentNode + '|' + eventId,\n            source: windowData.parentNode,\n            target: eventId,\n            component: 'smoothstep',\n        };\n        edges.push(edge);\n        const windowId = utils.getSearchParam('window');\n        const windowMap = windowData.convertFlowToMap(windowId, nodes);\n        windowData.convertMapToFlow(windowMap);\n    };\n    //_this.components.dialogWindow.closeWindow();\n}"
                        },
                        "onDelete": {
                            "body": "let windowData = this.windowData;\nif (windowData.node) {\n    var nodes = windowData.rfInstance.getNodes();\n    var nodes = nodes.filter((el) => {\n        return el.id != windowData.node.id\n    });\n    const windowId = utils.getSearchParam('window');\n    const windowMap = windowData.convertFlowToMap(windowId, nodes);\n    windowData.convertMapToFlow(windowMap);\n}\nthis.components.dialogWindow.closeWindow();"
                        }
                    }
                }
            ],
            "events": {
                "afterRender": {
                    "body": "windowData = this.windowData;\nif(windowData.node) {\nvar sourceValue = windowData.node.attributes.value.body || '';\nthis.setRecord({source: sourceValue});\n}"
                }
            }
        }
    ],
    "actions": [
        {
            "id": "save_button",
            "label": "Save",
            "icon": "pi pi-save",
            "type": "action",
            "events": {},
            "actions": [
                {
                    "id": "delete_button",
                    "label": "Delete",
                    "icon": "pi pi-trash",
                    "type": "action",
                    "events": {}
                }
            ]
        }
    ]
}