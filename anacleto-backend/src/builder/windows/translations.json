{"id":"translations","component":"GridContainer","layout":"flex","className":"flex-1 flex-column md:flex-row","components":[{"id":"translations_tree","store":"translations/translations","component":"Tree","title":"Translations","className":"flex-shrink-1","events":{"afterRender":{"body":"this.load();"},"onLoad":{"body":"const _this = this; /* Use _this on async callbacks */\nthis.setExpandedKeys({'root':true});"},"onContextMenu":{"parameters":"event","body":"const _this = this; /* Use _this on async callbacks */\ndebugger;\nconst deleteFile = (language) => {\n    utils.showConfirmDialog({\n        message: 'Do you want to delete this translation?',\n        header: 'Delete Confirmation',\n        icon: 'pi pi-info-circle',\n        acceptClassName: 'p-button-danger',\n        accept: function () {\n            _this.panelsContext.translations_editor.setIsLoading(true);\n            utils.callServer({\n                url: `/translations/${language}`,\n                method: 'delete',\n                params: {\n                    application: _this.context.destApplication,\n                },\n            }).then(function (response) {\n                if (response.data && response.data.success) {\n                    _this.panelsContext.translations_tree.load();\n                    const record = {\n                        langauge: '',\n                        source: '',\n                    };\n                    _this.panelsContext.translations_editor.setRecord(record);\n                    _this.panelsContext.translations_editor.setTitle('');\n                    _this.panelsContext.translations_editor.setShowToolbar(false);\n                    _this.panelsContext.translations_editor.components.source.disabled = true;\n                    utils.showToast({\n                        severity: 'success',\n                        summary: 'Translation deleted',\n                        detail: JSON.stringify(response.data, null, 4),\n                        life: 3000\n                    });\n                }\n                else {\n\n                    utils.showToast({\n                        severity: 'error',\n                        summary: 'Error',\n                        detail: 'Server error',\n                        sticky: true\n                    });\n                }\n\n                _this.panelsContext.translations_editor.setIsLoading(false);\n\n            }).catch(function (error) {\n                utils.showToast({ severity: 'error', summary: 'Error', detail: 'Server error: ' + error, sticky: true });\n                _this.panelsContext.translations_editor.setIsLoading(false);\n            });\n\n        }, reject: function () { },\n    });\n};\n\nconst createFile = (folderName, isDir) => {\n    utils.showInputDialog({\n        header: 'New translation',\n        message: 'Please specify a ISO2 language code',\n        defaultValue: '',\n        validate: (event, context) => {\n            const value = event.target.value;\n            if (!value || value.length != 2) {\n                return { success: false, message: 'Please specify a language ISO2 Code' };\n            }\n            const checkRegx = new RegExp(/[a-zA-Z]{2}/);\n            if (!checkRegx.test(value)) {\n                return { success: false, message: 'Invalid ISO2 Code' };\n            }\n            return { success: true }\n        }, accept: (event, context) => {\n            _this.panelsContext.translations_editor.setIsLoading(true);\n            let language = event.value;\n            const body = { \n                data: `{}` \n                };\n\n            utils.callServer({\n                url: `/translations/${language}`,\n                method: 'post',\n                params: {\n                    application: _this.context.destApplication,\n                },\n                data: body\n            })\n                .then(function (response) {\n                    debugger;\n                    if (response.data && response.data.success) {\n                        _this.panelsContext.translations_tree.load();\n                        const record = {\n                            language: language,\n                            source:body.data,\n                            sha: response.data.sha,\n                        };\n                        _this.panelsContext.translations_editor.setRecord(record);\n                        _this.panelsContext.translations_editor.setTitle(language);\n                        _this.panelsContext.translations_editor.setShowToolbar(true);\n                        _this.panelsContext.translations_editor.components.source.disabled = false;\n                    } else {\n                        utils.showToast({ severity: 'error', summary: 'Error', detail: 'Server error', sticky: true });\n                    }; _this.panelsContext.translations_editor.setIsLoading(false);\n                })\n                .catch(function (error) {\n                    utils.showToast({ severity: 'error', summary: 'Error', detail: 'Server error: ' + error, sticky: true });\n                    _this.panelsContext.translations_editor.setIsLoading(false);\n                });\n        }\n    });\n};\n\nlet buttons = [];\nconst selectedNode = event.node;\nif (event.node.key === \"i18n.json\") {\n    //can not delete default translations\n} else if (event.node.isRoot) {\n    //on root you can only add new translations\n    buttons.push({\n        label: 'Add translation',\n        icon: 'pi pi-language',\n        command: (event) => {\n            createFile()\n        }\n    });\n} else {\n    buttons.push({\n        label: 'Delete translation',\n        icon: 'pi pi-trash',\n        command: (event) => {\n            const language = selectedNode.language\n            deleteFile(language);\n        }\n    });\n}\nreturn buttons;"},"onSelect":{"parameters":"event","body":"const _this = this; /* Use _this on async callbacks */\n_this.panelsContext.translations_editor.setShowToolbar(false)\n_this.panelsContext.translations_editor.components.source.disabled = true\n\nconst record = {\n    source: ''\n};\n\n_this.panelsContext.translations_editor.setRecord(record)\nif (event.node.isRoot) {\n    _this.panelsContext.translations_editor.setTitle('')\n    return\n}\n\n_this.panelsContext.translations_editor.setIsLoading(true)\nconst fileName = event.node.key;\nlet language = event.node.language\n\nutils.callServer({\n    url: '/translations' + (language ? `/${language}` : ``),\n    method: 'get',\n    headers: {\n        application: _this.context.destApplication,\n    },\n}).then(function (response) {\n    if (response.data) {\n        const record = {\n            language: language,\n            script: fileName,\n            source: response.data.data,\n            sha: response.data.sha,\n        }\n        _this.panelsContext.translations_editor.setRecord(record)\n        _this.panelsContext.translations_editor.setTitle(event.node.label)\n        _this.panelsContext.translations_editor.setShowToolbar(true)\n        _this.panelsContext.translations_editor.components.source.disabled = false\n    } else {\n        utils.showToast({\n            severity: 'error',\n            summary: 'Error',\n            detail: 'Server error',\n            sticky: true\n        })\n    }\n    _this.panelsContext.translations_editor.setIsLoading(false)\n}).catch(function (error) {\n    utils.showToast({\n        severity: 'error',\n        summary: 'Error',\n        detail: 'Server error: ' + error,\n        sticky: true\n    });\n    _this.panelsContext.translations_editor.setIsLoading(false)\n})"}}},{"id":"translations_editor","component":"Form","layout":"flex","isCard":true,"containerClassName":"flex flex-auto","className":"flex flex-auto","components":[{"component":"CodeEditor","className":"align-self-stretch flex-1 flex","id":"source","theme":"light","language":"json","scope":"backend","disabled":true}],"events":{"afterRender":{"body":"this.panelsContext.translations_editor.setShowToolbar(false);this.panelsContext.translations_editor.components.source.disabled = true;"}},"actions":[{"id":"save","label":"Save","icon":"pi pi-save","type":"action","events":{"onClick":{"body":"const _this = this; /* Use _this on async callbacks */\ndebugger;\nconst record = _this.panelsContext.translations_editor.getRecord();\n\nconst body = {\n    data: record.source,\n    sha: record.sha\n}\n\nutils.callServer({\n    url: `/translations/${record.language|| ''}`,\n    method: 'patch',\n    params: {\n        application: _this.context.destApplication,\n    },\n    data: body\n})\n    .then(function (response) {\n        if (response.data && response.data.success) {\n            utils.showToast({ severity: 'success', summary: 'Trasnaltion saved', life:3000 });\n\n            const updatedRecord = _this.panelsContext.translations_editor.getRecord();\n            updatedRecord.sha = response.data.sha;\n            _this.panelsContext.translations_editor.setRecord(record)\n        } else {\n            utils.showToast({ severity: 'error', summary: 'Error', detail: 'Server error', sticky: true })\n        }; \n        _this.panelsContext.translations_editor.setIsLoading(false);\n    })\n    .catch(function (error) {\n        utils.showToast({ severity: 'error', summary: 'Error', detail: 'Server error: ' + error, sticky: true });\n        _this.panelsContext.translations_editor.setIsLoading(false);\n    });"}}}]}]}