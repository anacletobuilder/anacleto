{
    "id": "windows",
    "component": "GridContainer",
    "title": "Windows",
    "isCard": true,
    "layout": "flex",
    "className": "flex-column flex-auto",
    "components": [
        {
            "id": "windows_list",
            "store": "windows/list",
            "component": "DataTable",
            "className": "no-padding",
            "toggleable": false,
            "sortable": true,
            "removableSort": true,
            "columns": [
                {
                    "field": "window",
                    "header": "Window",
                    "sortable": true
                }
            ],
            "paginator": false,
            "stripedRows": true,
            "tableSize": "large",
            "scrollHeight": "flex",
            "isEditable": false,
            "editMode": "row",
            "dataKey": "id",
            "emptyMessage": "No windows",
            "events": {
                "onSelectionChange": {
                    "parameters": "event",
                    "body": "if(event.value) {\n    utils.openWindow({window:'/admin/window',searchParams:{window:event.value.window}})\n}"
                },
                "afterRender": {
                    "body": "this.load();"
                },
                "onContextMenu": {
                    "parameters": "event",
                    "body": "let _this = this;\n\nconst deleteWindow = (windowName) => {\n    utils.showConfirmDialog({\n        message: 'Do you want to delete this window?',\n        header: 'Delete Confirmation',\n        icon: 'pi pi-info-circle',\n        acceptClassName: 'p-button-danger',\n        accept: function () {\n            utils.callServer({\n                url: '/window',\n                method: 'delete',\n                params: {\n                    application: _this.context.destApplication,\n                    window: windowName,\n                },\n            }).then(function (response) {\n                if (response.data && response.data.success) {\n                    _this.load();\n                    utils.showToast({\n                        severity: 'success',\n                        summary: 'Window delete',\n                        detail: JSON.stringify(response.data),\n                        life: 3000,\n                    });\n                } else {\n                    utils.showToast({\n                        severity: 'error',\n                        summary: 'Error',\n                        detail: 'Server error',\n                        sticky: true,\n                    });\n                }\n            }).catch(function (error) {\n                utils.showToast({\n                    severity: 'error',\n                    summary: 'Error',\n                    detail: 'Server error:' + error,\n                    sticky: true,\n                });\n            });\n        },\n        reject: function () { },\n    });\n};\n\n//returns available buttons\nlet buttons = [];\nconst selectedRow = event.data;\nbuttons.push({\n    label: 'Delete window',\n    icon: 'pi pi-trash',\n    command: () => {\n        const windowName = selectedRow.window.replace('.json', '');\n        deleteWindow(windowName);\n    },\n});\nreturn buttons;"
                }
            }
        }
    ],
    "actions": [
        {
            "id": "new_window",
            "label": "New window",
            "icon": "pi pi-add",
            "type": "action",
            "events": {
                "onClick": {
                    "body": "const _this = this; /* Use _this on async callbacks */\n\n/**\n * Call server and create a window\n */\nfunction createWindow({ name }) {\n    const body = {\n        data: utils._stringifyJsonWithFunctions({\n            window: name,\n            windowName: name,\n            components: [],\n        }),\n    };\n\n    utils.callServer({\n        url: '/window',\n        method: 'post',\n        params: {\n            application: _this.context.destApplication,\n            window: name,\n        },\n        data: body,\n    }).then(function (response) {\n        if (response.data.success) {\n            utils.showToast({\n                severity: 'success',\n                summary: 'Window created',\n                detail: 'ðŸ˜Š',\n                life: 3000,\n            })\n\n            _this.components.windows_list.load();\n        } else {\n            utils.showToast({\n                severity: 'error',\n                summary: 'Window not created',\n                detail: response.data?.message || 'ðŸ˜•',\n                sticky: true,\n            })\n        }\n    }).catch(function (error) {\n        utils.showToast({\n            severity: 'error',\n            summary: 'Window not created',\n            detail: 'Internal server error',\n            sticky: true,\n        })\n    })\n}\n\n\n\n//Show input dialog\nutils.showInputDialog({\n    header: 'New window',\n    message: 'Please select an id for your new window. This id will be visible in the url when the window is opened, for example: your_domain.org/window_id',\n    defaultValue: '',\n    validate: (_event, _context) => {\n        const value = event.target.value;\n        const checkRegx = new RegExp(/^\\w+$/)\n        if (!checkRegx.test(value)) {\n            return {\n                success: false,\n                message: 'Invalid window name, you can use alphanumeric characters or underscores'\n            };\n        }\n        return {\n            success: true\n        }\n    },\n    accept: (_event, _context) => {\n        const name = _event.value\n        createWindow({ name })\n    },\n})"
                }
            }
        }
    ]
}