{"id":"windows","component":"GridContainer","title":"Windows","isCard":true,"layout":"flex","className":"flex-column flex-auto","components":[{"id":"windows_list","store":"windows/list","component":"DataTable","className":"no-padding","toggleable":false,"sortable":true,"removableSort":true,"columns":[{"field":"window","header":"Window","sortable":true}],"paginator":false,"stripedRows":true,"tableSize":"large","scrollHeight":"flex","isEditable":false,"editMode":"row","dataKey":"id","emptyMessage":"No windows","events":{"onSelectionChange":{"parameters":"event","body":"if(event.value) {utils.openWindow({window:'/admin/window',searchParams:{window:event.value.window}});}"},"afterRender":{"body":"this.load();"},"onContextMenu":{"parameters":"event","body":"let _this = this;const deleteWindow = (windowName) => {utils.showConfirmDialog({message: 'Do you want to delete this window?',header: 'Delete Confirmation',icon: 'pi pi-info-circle',acceptClassName: 'p-button-danger',accept: function () {utils.callServer({url: '/window',method: 'delete',params: {application: _this.context.destApplication,window: windowName,},}).then(function (response) {if (response.data && response.data.success) {_this.load();utils.showToast({severity: 'success',summary: 'Window delete',detail: JSON.stringify(response.data),life: 3000,});} else {utils.showToast({severity: 'error',summary: 'Error',detail: 'Server error',sticky: true,});}}).catch(function (error) {utils.showToast({severity: 'error',summary: 'Error',detail: 'Server error:' + error,sticky: true,});});},reject: function () {},});};let buttons = [];const selectedRow = event.data;buttons.push({label: 'Delete window',icon: 'pi pi-trash',command: () => {const windowName = selectedRow.window.replace('.json', '');deleteWindow(windowName);},});return buttons;"}}}],"actions":[{"id":"new_window","label":"New window","icon":"pi pi-add","type":"action","events":{"onClick":{"body":"const _this = this; /* Use _this on async callbacks */\n/**\n * Call server and create a window\n */\nfunction createWindow({ name }) {\n    const body = {\n        data: utils._stringifyJsonWithFunctions({\n            window: name,\n            windowName: name,\n            components: [],\n        }),\n    };\n\n    utils.callServer({\n        url: '/window',\n        method: 'post',\n        params: {\n            application: _this.context.destApplication,\n            window: name,\n        },\n        data: body,\n    }).then(function (response) {\n        if (response.data.success) {\n            utils.showToast({\n                severity: 'success',\n                summary: 'Window created',\n                detail: 'ðŸ˜Š',\n                life: 3000,\n            })\n\n            _this.panelsContext.windows_list.load();\n        } else {\n            utils.showToast({\n                severity: 'error',\n                summary: 'Window not created',\n                detail: response.data?.message || 'ðŸ˜•' ,\n                sticky: true,\n            })\n        }\n    }).catch(function (error) {\n        utils.showToast({\n            severity: 'error',\n            summary: 'Window not created',\n            detail: 'Internal server error',\n            sticky: true,\n        })\n    })\n}\n\n\n\n\nutils.showInputDialog({\n    header: 'New window',\n    message: 'Please specify a window id',\n    defaultValue: '',\n    validate: (_event, _context) => {\n        const value = event.target.value;\n        const checkRegx =  new RegExp(/^\\w+$/)\n        if (!checkRegx.test(value)) {\n            return {\n                success: false,\n                message: 'Invalid window name'\n            };\n        }\n        return {\n            success: true\n        }\n    },\n    accept: (_event, _context) => {\n        const name = _event.value\n        createWindow({ name })\n    },\n})"}}}]}