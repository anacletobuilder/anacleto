{
    "id": "scripts",
    "component": "GridContainer",
    "layout": "flex",
    "className": "flex-1 flex-column md:flex-row",
    "components": [
        {
            "id": "scripts_list",
            "store": "code/scripts_list",
            "component": "Tree",
            "title": "Script Tree",
            "filterMode": "lenient",
            "className": "flex-shrink-1",
            "events": {
                "afterRender": {
                    "body": "this.load();"
                },
                "onContextMenu": {
                    "parameters": "event",
                    "body": "const _this = this;\n\n/**\n * Delete script function\n */\nconst deleteFile = (scriptName, isDir) => {\n    utils.showConfirmDialog({\n        message: isDir ? 'Do you want to delete this folder?' : 'Do you want to delete this script?',\n        header: 'Delete Confirmation',\n        icon: 'pi pi-info-circle',\n        acceptClassName: 'p-button-danger',\n        accept: function() {\n            _this.components.scripts_editor.setIsLoading(true);\n            utils.callServer({\n                url: '/script',\n                method: 'delete',\n                params: {\n                    application: _this.context.destApplication,\n                    script: scriptName,\n                    isDir: isDir\n                },\n            }).then(function(response) {\n                if (response.data && response.data.success) {\n                    _this.components.scripts_list.load();\n                    const record = {\n                        script: '',\n                        source: '',\n                    };\n                    _this.components.scripts_editor.setRecord(record);\n                    _this.components.scripts_editor.setTitle('');\n                    _this.components.scripts_editor.setShowToolbar(false);\n                    _this.components.scripts_editor.components.source.disabled = true;\n                    utils.showToast({\n                        severity: 'success',\n                        summary: 'Script deleted',\n                        detail: 'ðŸ’€',\n                        life: 3000\n                    });\n                } else {\n                    utils.showToast({\n                        severity: 'error',\n                        summary: 'Error',\n                        detail: 'Server error',\n                        sticky: true\n                    });\n                }\n                _this.components.scripts_editor.setIsLoading(false);\n            }).catch(function(error) {\n                utils.showToast({\n                    severity: 'error',\n                    summary: 'Error',\n                    detail: 'Server error: ' + error,\n                    sticky: true\n                });\n                _this.components.scripts_editor.setIsLoading(false);\n            });\n        },\n        reject: function() {},\n    });\n};\n\n/**\n * Create script function\n */\nconst createFile = (folderName, isDir) => {\n    utils.showInputDialog({\n        header: isDir ? 'New folder' : 'New file',\n        message: isDir ? 'A folder cannot be empty, please specify the folder name followed by a script name [my_folder / my_script]' : 'Please specify a name for the new file',\n        defaultValue: folderName,\n        validate: (event, context) => {\n            const value = event.target.value;\n            if (!value || value.length < 1) {\n                return {\n                    success: false,\n                    message: isDir ? 'Please folder/script' : 'Please specify a script name'\n                };\n            }\n            const checkRegx = isDir ? new RegExp(/^\\w+\\/+\\w+$/) : new RegExp(/^\\w+$/);\n            if (!checkRegx.test(value)) {\n                return {\n                    success: false,\n                    message: isDir ? 'Invalid path' : 'Invalid file name'\n                };\n            }\n            return {\n                success: true\n            }\n        },\n        accept: (event, context) => {\n            _this.components.scripts_editor.setIsLoading(true);\n            let scriptName = event.value;\n            if (!isDir && selectedNode.filePath) {\n                /*nei file devo aggiungere anche il path delle cartelle se sono in sottocartelle*/\n                scriptName = selectedNode.filePath.substr(1) + '/' + scriptName;\n            }\n            const scriptSource = `/**\\n *Â @author:${utils.userCredential.username}\\n * @date: ${new Date().toGMTString()}\\n */`;\n            const body = {\n                data: scriptSource\n            };\n            utils.callServer({\n                url: '/script',\n                method: 'post',\n                params: {\n                    application: _this.context.destApplication,\n                    script: scriptName,\n                },\n                data: body\n            }).then(function(response) {\n                if (response.data && response.data.success) {\n                    _this.components.scripts_list.load();\n                    const record = {\n                        script: scriptName,\n                        source: scriptSource,\n                        sha: response.data.sha,\n                    };\n                    _this.components.scripts_editor.setRecord(record);\n                    _this.components.scripts_editor.setTitle(scriptName + '.js');\n                    _this.components.scripts_editor.setShowToolbar(true);\n                    _this.components.scripts_editor.components.source.disabled = false;\n                } else {\n                    utils.showToast({\n                        severity: 'error',\n                        summary: 'Error',\n                        detail: 'Server error',\n                        sticky: true\n                    });\n                };\n                _this.components.scripts_editor.setIsLoading(false);\n            }).catch(function(error) {\n                utils.showToast({\n                    severity: 'error',\n                    summary: 'Error',\n                    detail: 'Server error: ' + error,\n                    sticky: true\n                });\n                _this.components.scripts_editor.setIsLoading(false);\n            });\n        }\n    });\n};\n\n\n//add buttons\nlet buttons = [];\nconst selectedNode = event.node;\nif (event.node.isRoot || event.node.isDir) {\n    /*posso aggiungere cartellaposso aggiungere fileposso cancellare cartella se non root*/\n    buttons.push({\n        label: 'New folder',\n        icon: 'pi pi-folder',\n        command: () => {\n            const folderName = event.node.isRoot ? `` : `${selectedNode.data}/`;\n            createFile(folderName, true);\n        }\n    });\n    buttons.push({\n        label: 'New script',\n        icon: 'pi pi-file',\n        command: () => {\n            createFile('', false);\n        }\n    });\n    if (!event.node.isRoot) {\n        buttons.push({\n            label: 'Delete folder',\n            icon: 'pi pi-trash',\n            command: () => {\n                const scriptName = selectedNode.data;\n                deleteFile(scriptName, true);\n            }\n        });\n    }\n} else {\n    buttons.push({\n        label: 'Delete file',\n        icon: 'pi pi-trash',\n        command: (event) => {\n            const scriptName = selectedNode.filePath.substring(1, selectedNode.filePath.lastIndexOf('.'));\n            deleteFile(scriptName, false);\n        }\n    });\n}\nreturn buttons;"
                },
                "onSelect": {
                    "parameters": "event",
                    "body": "const _this = this; /* Use _this on async callbacks */\n_this.components.scripts_editor.setShowToolbar(false);\n_this.components.source.setDisabled(true)\nconst record = {\n    source: ''\n};\n_this.components.scripts_editor.setRecord(record);\nif (event.node.isDir || event.node.isRoot) {\n    /*Ã¨ una cartella*/\n    _this.components.scripts_editor.setTitle('');\n    return;\n}\n_this.components.scripts_editor.setIsLoading(true);\nlet key = event.node.key;\nif (key.indexOf('/') === 0) {\n    key = key.substr(1)\n}\nconst scriptName = key.substring(0, key.lastIndexOf('.'));\nutils.callServer({\n    url: '/script',\n    method: 'get',\n    params: {\n        application: _this.context.destApplication,\n        script: scriptName,\n    },\n}).then(function(response) {\n    if (response.data && response.data.success) {\n        const record = {\n            script: scriptName,\n            source: response.data.data,\n            sha: response.data.sha\n        };\n        _this.components.scripts_editor.setRecord(record);\n        _this.components.scripts_editor.setTitle(scriptName + '.js');\n        _this.components.scripts_editor.setShowToolbar(true);\n        _this.components.source.setDisabled(false);\n    } else {\n        utils.showToast({\n            severity: 'error',\n            summary: 'Error',\n            detail: 'Server error',\n            sticky: true\n        });\n    }\n    _this.components.scripts_editor.setIsLoading(false);\n}).catch(function(error) {\n    utils.showToast({\n        severity: 'error',\n        summary: 'Error',\n        detail: 'Server error: ' + error,\n        sticky: true\n    });\n    _this.components.scripts_editor.setIsLoading(false);\n});"
                }
            }
        },
        {
            "id": "scripts_editor",
            "component": "Form",
            "layout": "flex",
            "isCard": true,
            "containerClassName": "flex flex-auto",
            "className": "flex flex-auto",
            "components": [
                {
                    "component": "CodeEditor",
                    "className": "align-self-stretch flex-1 flex",
                    "id": "source",
                    "theme": "light",
                    "language": "javascript",
                    "scope": "backend",
                    "disabled": true
                }
            ],
            "events": {
                "afterRender": {
                    "body": "this.components.scripts_editor.setShowToolbar(false)"
                }
            },
            "actions": [
                {
                    "id": "save",
                    "label": "Save",
                    "icon": "pi pi-save",
                    "type": "action",
                    "events": {
                        "onClick": {
                            "body": "const _this = this;\n_this.setIsLoading(true);\nconst record = _this.getRecord();\nconst source = record.source;\nconst body = {\n    data: record.source,\n    sha: record.sha\n};\nutils.callServer({\n    url: '/script',\n    method: 'patch',\n    params: {\n        application: _this.context.destApplication,\n        script: record.script,\n    },\n    data: body\n}).then(function(response) {\n    if (response.data.success == true) {\n        utils.showToast({\n            severity: 'success',\n            summary: 'Script updated',\n            detail: `<${response.data.sha}>`,\n            life: 3000\n        });\n        const record = _this.getRecord();\n        record.sha = response.data.sha;\n        _this.setRecord(record)\n    } else {\n        utils.showToast({\n            severity: 'error',\n            summary: 'Error',\n            detail: response?.data?.message || 'Server error',\n            sticky: true\n        });\n    }\n    _this.setIsLoading(false);\n}).catch(function(error) {\n    utils.showToast({\n        severity: 'error',\n        summary: 'Error',\n        detail: 'Server error: ' + error || 'Error',\n        sticky: true\n    });\n    _this.setIsLoading(false);\n});"
                        }
                    },
                    "actions": [
                        {
                            "id": "rename",
                            "label": "Rename",
                            "icon": "pi pi-pencil",
                            "type": "action",
                            "events": {
                                "onClick": {
                                    "body": "utils.showToast({ severity: 'warning', summary: 'TODO', detail: 'Not implemented, use right click in tree', life: 3000 });"
                                }
                            }
                        },
                        {
                            "id": "delete",
                            "label": "Delete",
                            "icon": "pi pi-times",
                            "type": "action",
                            "events": {
                                "onClick": {
                                    "body": "utils.showToast({ severity: 'warning', summary: 'TODO', detail: 'Not implemented, use right click in tree', life: 3000 });"
                                }
                            }
                        }
                    ]
                }
            ]
        }
    ]
}