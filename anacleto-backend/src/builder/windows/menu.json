{"id":"menu","title":"Menu","component":"GridContainer","layout":"flex","className":"flex-1 flex-column md:flex-row flex-nowrap","components":[{"id":"menu_tree","store":"menu/menu_tree","component":"Tree","title":"Menu tree","className":"flex-1","events":{"afterRender":{"body":"this.components.menu_tree.load();"},"onContextMenu":{"parameters":"event","body":"const _this = this; /* Use _this on async callbacks */\nconst selectedNode = event.node\nconst nodes = _this.components.menu_tree.nodes[0].children\ndebugger;\n\n/**\n * Convert list to metadata format\n */\nconst treeToList = function (_node) {\n    return _node.map((_leave) => {\n        let _item = {\n            key: _leave.key,\n            label: _leave.label,\n            icon: _leave.icon,\n            command:  _leave.command,\n        }\n        if (_leave.children) {\n            _item.components = treeToList(_leave.children)\n        }\n        return _item\n    })\n}\n\n/**\n * Call backend for update menu\n */\nconst updateMenu = (_node) => {\n    const body = {\n        menu: treeToList(_node)\n    }\n\n    return utils.callServer({\n        url: '/menu',\n        method: 'patch',\n        params: {\n            application: _this.context.destApplication\n        },\n        data: body,\n    }).then(function (response) {\n        if (response.data.success == true) {\n            utils.showToast({\n                severity: 'success',\n                summary: 'Menu updated',\n                detail: '😁',\n                life: 3000,\n            })\n        }\n\n        return Promise.resolve(response)\n    })\n}\n\n/**\n * Ask for delete a leave\n */\nconst deleteLeave = (isDir) => {\n    utils.showConfirmDialog({\n        message: isDir ? 'Do you want to delete this folder?' : 'Do you want to delete this leave?',\n        header: 'Delete Confirmation',\n        icon: 'pi pi-info-circle',\n        acceptClassName: 'p-button-danger',\n        accept: function () {\n\n            _this.components.leave_grid_container.setIsToolbarLoading(true)\n\n            updateMenu(nodes.filter((_leave) => { return _leave !== selectedNode }))\n                .then(function (response) {\n                    if (response.data.success == true) {\n                        _this.components.leave_code.setRecord({})\n                        _this.components.leave_info.setRecord({})\n                        _this.components.menu_tree.load()\n                    } else {\n                        utils.showToast({\n                            severity: 'error',\n                            summary: 'Error',\n                            detail: JSON.stringify(response.data),\n                            sticky: true,\n                        })\n                    }\n\n                    _this.components.leave_grid_container.setIsToolbarLoading(false)\n                }).catch(function (error) {\n                    utils.showToast({\n                        severity: 'error',\n                        summary: 'Error',\n                        detail: 'Servererror: ' + error || 'Error',\n                        sticky: true,\n                    })\n\n                    _this.components.leave_grid_container.setIsToolbarLoading(false)\n                })\n        },\n        reject: function () { },\n    })\n}\n\n/**\n * Ask for create leave \n */\nconst createLeave = (isDir) => {\n\n    utils.showInputDialog({\n        header: isDir ? 'New folder' : 'New leave',\n        message: isDir ? 'A folder cannot be empty, please specify the folder name' : 'Please specify a leave name',\n        defaultValue: '',\n        validate: (_event, _context) => {\n            return {\n                success: true\n            }\n        },\n        accept: (_event, _context) => {\n            _this.components.leave_grid_container.setIsToolbarLoading(true)\n\n            /**\n             * Create an empty scripts\n             */\n            const scriptSource = `/**\\n * @author:${utils.userCredential.username}\\n * @date: ${new Date().toGMTString()}\\n */`\n            const newLeave = {\n                key: `${Date.now()}`,\n                label: _event.value,\n                icon: `pi pi-fw ${isDir ? 'pi-folder' : 'pi-file'}`,\n                command: {\n                    body: scriptSource\n                },\n            }\n\n            if (isDir) {\n                newLeave.children = []\n            }\n\n            selectedNode.children.push(newLeave) //<-- error!!!\n            \n\n            updateMenu(nodes)\n                .then(function (response) {\n                    if (response.data.success !== true) {\n                        utils.showToast({\n                            severity: 'error',\n                            summary: 'Error',\n                            detail: JSON.stringify(response.data),\n                            sticky: true,\n                        })\n                    }\n                    _this.components.leave_grid_container.setIsToolbarLoading(false)\n\n                }).catch(function (error) {\n                    utils.showToast({\n                        severity: 'error',\n                        summary: 'Error',\n                        detail: 'Server error: ' + error || 'Error',\n                        sticky: true,\n                    })\n                    _this.components.leave_grid_container.setIsToolbarLoading(false)\n                })\n        },\n    })\n}\n\n\n\n/**************************************\n * Add buttons based on selected leave\n **************************************/\n\nlet buttons = []\nbuttons.push({\n    label: 'New folder',\n    icon: 'pi pi-folder',\n    command: () => {\n        createLeave(true)\n    },\n})\nbuttons.push({\n    label: 'New leave',\n    icon: 'pi pi-file',\n    command: () => {\n        createLeave(false)\n    },\n})\n\nif (event.node.isRoot || event.node.children) {\n    //can delete folder only if not root\n    if (!event.node.isRoot) {\n        buttons.push({\n            label: 'Delete folder',\n            icon: 'pi pi-trash',\n            command: () => {\n                deleteLeave(true)\n            },\n        })\n    }\n} else {\n    //can delete file\n    buttons.push({\n        label: 'Delete leave',\n        icon: 'pi pi-trash',\n        command: (event) => {\n            deleteLeave(false)\n        },\n    })\n}\n\nreturn buttons"},"onSelect":{"parameters":"event","body":"const _this = this; /* Use _this on async callbacks */\n_this.components.leave_grid_container.setShowToolbar(false);\n_this.components.leave_grid_container.setTitle(event.node?.label || '');\n_this.components.label.setDisabled(true);\n_this.components.icon.setDisabled(true);\n_this.components.source.setDisabled(true);\nif (!event.node.command) {\n    event.node.command = '';\n} \n\nconst record = {\n    'key': event.node.key,\n    'source': event.node.command.body?.trim(),\n    'label': event.node.label,\n    'icon': event.node.icon\n};\n\n_this.components.leave_info.setRecord(record);\n_this.components.leave_code.setRecord(record);\n_this.components.label.setDisabled(false);\n_this.components.icon.setDisabled(false);\n_this.components.source.setDisabled(false);\n_this.components.leave_grid_container.setShowToolbar(true);"}}},{"id":"leave_grid_container","component":"GridContainer","layout":"flex","isCard":true,"className":"flex-grow-2 flex-shrink-2 flex-column stretch","components":[{"id":"leave_info","component":"Form","layout":"flex","className":"gap-3","components":[{"component":"TextInput","containerClassName":"ml-6","id":"label","disabled":true,"label":"Label"},{"component":"TextInput","id":"icon","disabled":true,"label":"Icon name"}]},{"id":"leave_code","component":"Form","layout":"flex","containerClassName":"flex flex-auto","className":"flex flex-auto leave_code gap-3","components":[{"component":"CodeEditor","className":"flex flex-auto","id":"source","theme":"light","language":"javascript","disabled":true}],"events":{"afterRender":{"body":"const _this = this; /* Use _this on async callbacks */\nthis.components.source.disabled = true;"}}}],"events":{"afterRender":{"body":"this.components.leave_grid_container.setShowToolbar(false);"}},"actions":[{"id":"save","label":"Save","icon":"pi pi-save","type":"action","events":{"onClick":{"body":"const _this = this; /* Use _this on async callbacks */\n_this.components.leave_grid_container.setIsToolbarLoading(true);\n\ndebugger;\n\nconst record = {\n    key: _this.components.leave_info.getRecord().key,\n    label: _this.components.leave_info.getRecord().label,\n    icon: _this.components.leave_info.getRecord().icon,\n    command: {\n        body: _this.components.leave_code.getRecord().source\n    }\n};\n\n\nconst nodes = _this.components.menu_tree.nodes[0].children;\n\n\nconst treeToList = function (_node) {\n    return _node.map(_leave => {\n        if (_leave.key === record.key) {\n            _leave = {\n                ..._leave,\n                ...record\n            };\n        }\n        if (_leave.children) {\n            _leave.components = treeToList(_leave.children);\n            delete _leave.children\n        };\n        return _leave;\n    })\n};\n\n\nconst body = {\n    'menu': treeToList(nodes)\n};\nutils.callServer({\n    'url': '/menu',\n    'method': 'patch',\n    'params': {\n        'application': _this.context.destApplication,\n    },\n    'data': body\n}).then(function (response) {\n    if (response.data.success == true) {\n        utils.showToast({\n            'severity': 'success',\n            'summary': 'Script updated',\n            'detail': JSON.stringify(response.data),\n            'life': 3000\n        });\n        _this.components.menu_tree.load();\n        _this.components.menu_tree.setNodes(_this.components.menu_tree.nodes);\n    } else {\n        utils.showToast({\n            'severity': 'error',\n            'summary': 'Error',\n            'detail': JSON.stringify(response.data),\n            'sticky': true\n        });\n    };\n    _this.components.leave_grid_container.setIsToolbarLoading(false);\n}).catch(function (error) {\n    utils.showToast({\n        'severity': 'error',\n        'summary': 'Error',\n        'detail': 'Server error: ' + error || 'Error',\n        'sticky': true\n    });\n    _this.components.leave_grid_container.setIsToolbarLoading(false);\n});"}}}]}]}