{
	"id":"add_node",
	"title": "Add info",
	"component": "GridContainer",
	"isCard": true,
	"layout": "grid",
	"className": "p-0 pt-2",
	"components": [
		{
			"id": "add_node_info",
			"dataModel": "Window",
			"component": "Form",
			"components": [{
				"id": "controlId",
				"component": "TextInput",
				"hasFloatingLabel": true,
				"value": "",
				"label": "ID*",
				"className": "p-inputtext-sm block col-12 md:col-6 mt-2 w-full",
				"events": {
					"validate": {
						"parameters": "event",
						"body": "let forwardData = this.components.dialogWindow.forwardData; const value = event.target.value;if (!value || value.length < 1) {return { success: false, message: 'Please specify a valid ID' };}else {var existNode = forwardData.rfInstance.getNode(value);if(existNode) {return { success: false, message: 'Id already set for this window' };}}return {success:true};"
					}
				}
			}]
		},
		{
			"id": "add_node_choose_type",
			"title": "Control type",
			"component": "Form",
			"className": "col-12",
			"components": [],
			"events": {
				"afterRender": {
					"body": "const _this = this;let nodeType = utils.getControlsList();let itemTypes = [];for (let i = 0; i < nodeType.length; i++) { itemTypes.push({ id: nodeType[i], component: 'ToggleButton', onLabel: nodeType[i].toUpperCase(), offLabel: nodeType[i].toUpperCase(), className: 'col-12 p-button-sm p-button-outlined h-2rem', value: false, tabIndex: i, iconPos: 'right', events: { onChange: { parameters: 'event', body: 'const _this = this;let typeRecord =_this.components.add_node_choose_type.getRecord();let typeSelected = event.target.id;if (typeRecord.selectedType && typeSelected != typeRecord.selectedType) {_this.components[typeRecord.selectedType].setChecked(false);}if (event.value) {_this.components.add_node_choose_type.setRecord({selectedType: typeSelected,});} else {_this.components.add_node_choose_type.setRecord({selectedType: null,});}' }, onClick: { body: 'alert(JSON.stringify(_this.components.window_header.getRecord()));', }, }, });}_this.components.add_node_choose_type.setItems(itemTypes);_this.components.add_node_choose_type.setRecord({ selectedType: null });"
				}
			}
		}
	],
	"actions":[
		{
			"id": "Save",
			"label": "Save",
			"icon": "pi pi-save",
			"events" : {
				"onClick": {
					"body": "const _this = this;if (_this.components.add_node_choose_type.getRecord().selectedType) { let selectedType = _this.components.add_node_choose_type.getRecord().selectedType; let defaultControlConfig = utils.getDefaultControlsConfig(selectedType); let forwardData = this.components.dialogWindow.forwardData; let nodes = forwardData.rfInstance.getNodes(); let edges = forwardData.rfInstance.getEdges(); let newNode = JSON.parse(JSON.stringify(forwardData.emptyNode)); newNode.attributes = defaultControlConfig; newNode.id = _this.components.add_node_info.getRecord().controlId; newNode.attributes.id = newNode.id; newNode.ancestorNode = forwardData.parentNode; const getItmSiblingPos = function (nodes, parentNode) { return nodes.findIndex((n) => { return n.id === parentNode + '_ADDNEWITM'; }); }; let addItmSiblingPos = getItmSiblingPos(nodes, forwardData.parentNode); if (addItmSiblingPos > -1) { newNode.itemPosition = nodes[addItmSiblingPos].itemPosition || 0; nodes[addItmSiblingPos].itemPosition++; siblingNodes = nodes.filter((el) => { return ( el.ancestorNode == forwardData.parentNode && el.type != 'itemnode' && el.type != 'addnode' ); }); for (var i in siblingNodes) { var nodeIndex = nodes.findIndex((el) => { return el.id == siblingNodes[i].id; }); if (nodeIndex > -1) { nodes[nodeIndex].itemPosition++; } } } else { newNode.itemPosition = 0; } newNode.data = { label: newNode.id, attributeType: selectedType }; newNode.type = 'itemnode'; if (addItmSiblingPos > -1) { nodes.splice(addItmSiblingPos, 0, newNode); } else { nodes.push(newNode); } var edge = { id: forwardData.parentNode + '|' + newNode.id, source: forwardData.parentNode, target: newNode.id, type: 'smoothstep', }; edges.push(edge); var childPos = addItmSiblingPos; if (newNode.attributes.components) { let addItmNode = { ...forwardData.emptyNode, data: { label: 'Aggiungi oggetto', attributeType: '' }, id: newNode.id + '_ADDNEWITM', type: 'addnode', attributes: { id: newNode.id + '_ADDNEWITM', title: 'Aggiungi', nodeType: 'addnode', }, }; if (childPos && childPos > -1) { nodes.splice(childPos + 1, 0, addItmNode); childPos++; } else { nodes.push(addItmNode); } edges.push({ id: newNode.id + '|' + addItmNode.id, source: newNode.id, target: addItmNode.id, type: 'smoothstep', }); } if (newNode.attributes.events) { let addEventNode = { ...forwardData.emptyNode, data: { label: 'Aggiungi evento', attributeType: '' }, id: newNode.id + '_ADDEVENT', type: 'addeventnode', attributes: { id: newNode.id + '_ADDEVENT', title: 'Aggiungi', nodeType: 'addeventnode', }, }; if (childPos && childPos > -1) { nodes.splice(childPos + 1, 0, addEventNode); childPos++; } else { nodes.push(addEventNode); } edges.push({ id: newNode.id + '|' + addEventNode.id, source: newNode.id, target: addEventNode.id, type: 'smoothstep', }); } if (newNode.attributes.actions) { let addToolbarItmNode = { ...forwardData.emptyNode, data: { label: 'test5_form_ADDTOOLBARBTN', attributeType: 'TOOLBAR BUTTON', }, id: newNode.id + '_ADDTOOLBARBTN', type: 'addnode', attributes: { id: newNode.id + '_ADDTOOLBARBTN', title: '', nodeType: 'addactions', }, }; if (childPos && childPos > -1) { nodes.splice(childPos + 1, 0, addToolbarItmNode); childPos++; } else { nodes.push(addToolbarItmNode); } edges.push({ id: newNode.id + '|' + addToolbarItmNode.id, source: newNode.id, target: addToolbarItmNode.id, type: 'smoothstep', }); } _this.components.window_flow_builder.setNodes(nodes); _this.components.window_flow_builder.setEdges(edges); const windowId = utils.getSearchParam('window'); const windowMap = forwardData.convertFlowToMap(windowId, nodes); forwardData.convertMapToFlow(windowMap); _this.components.dialogWindow.closeWindow();}"
				}
			}
		}
	]
}